const path = require('path');
const fs = require('fs');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const WebpackMd5Hash = require('webpack-md5-hash');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");
const CleanWebpackPlugin = require("clean-webpack-plugin");
const absolutePath = path.resolve(__dirname, '../../../')

const HtmlBuilder = require(absolutePath + '/src/router/index')
const UtilsEntry = require(absolutePath + '/src/entry/index')
const BuildEntry = {} //其他js文件入口

const files = fs.readdirSync(absolutePath + '/src/store/js')
getEntryPath(absolutePath + '/src/store/js', files)

// resolve js path and build entry object
function getEntryPath(abpath, files) {
  files.forEach((item, index) => {
    if (item.split('.').pop().toLowerCase() === 'js') {
      const p = item.split('.')[0].split('\\').pop()
      BuildEntry[p] = []
      BuildEntry[p].push(path.resolve(abpath + '/' + item))
    } else {
      const f = fs.readdirSync(path.resolve(abpath + '/' + item))
      getEntryPath(abpath + '/' + item, f)
    }
  })
}

function getHtmlConfig(name, chunks) {
  return {
    template: './src/' + name + '.html',
    filename: name + '.html',
    inject: false,
    hash: true,
    chunks: chunks,
    minify: {
      removeComment: true,
      collapseWhitespace: true
    }
  };
}

module.exports = {
  entry: Object.assign(UtilsEntry.entry, BuildEntry),
  module: {
    rules: [{
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader"
        }
      },
      {
        test: /\.(png|jpg)$/,
        loader: 'url-loader?limit=8192&name=images/[hash:8].[name].[ext]',
        options: {
          publicPath: '/'
        }
      },
      {
        test: /\.(css|less)$/,
        use: ['style-loader', MiniCssExtractPlugin.loader, 'css-loader', 'less-loader']
      }
    ]
  },
  plugins: [
    // delete old dist
    new CleanWebpackPlugin(['dist'], {
      root: path.resolve(absolutePath),
      verbose: true,
      dry: false,
    }),
    // copy static folder
    new CopyWebpackPlugin([{
      from: 'static',
      to: 'static'
    }]),
    // mini css
    new MiniCssExtractPlugin({
      filename: 'static/style.[contenthash].css',
    }),
    new WebpackMd5Hash()
  ]
};

// build html file
HtmlBuilder.route.forEach((element) => {
  module.exports.plugins.push(new HtmlWebpackPlugin(getHtmlConfig(element._html, element.chunks)));
})